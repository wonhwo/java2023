package Memojang;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;

import javax.swing.*;

public class Memomain extends JFrame implements ActionListener {
	JTextArea ta;
	JFileChooser jfc;
	boolean isNew = false;
	public Memomain() {
		setTitle("레삐의 메모장");
		MainView();
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ta=new JTextArea();
		JScrollPane jsp = new JScrollPane(ta);
		jfc=new JFileChooser();
		
		this.add(jsp);
		setBounds(800,200,500,700);
		setVisible(true);
	}
	public void MainView() {
		KeyStroke Key;
		JMenuBar mb = new JMenuBar();
		JMenu m1,m2,m3,m4,m5;
		JMenuItem item;
		m1=new JMenu("파일(F)");m1.setMnemonic(KeyEvent.VK_F);
		
		item = new JMenuItem("새로 만들기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m1.add(item);
		
		item = new JMenuItem("열기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_O,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m1.add(item);
		m1.addSeparator();
		
		item = new JMenuItem("저장");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_S,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m1.add(item);
		
		item = new JMenuItem("다른이름으로 저장");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_A,ActionEvent.CTRL_MASK+ActionEvent.SHIFT_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m1.add(item);
		m1.addSeparator();
		
		item = new JMenuItem("끝내기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m1.add(item);
		
		////////////////////////////////////////////////////
		m2=new JMenu("편집(E)");m2.setMnemonic(KeyEvent.VK_E);
		
		item = new JMenuItem("실행 취소");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_Z,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		m2.addSeparator();
		
		item = new JMenuItem("잘라내기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		item = new JMenuItem("복사");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		item = new JMenuItem("붙여넣기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		item = new JMenuItem("삭제");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		m2.addSeparator();
		
		item = new JMenuItem("찾기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_F,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		item = new JMenuItem("다음 찾기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_F3,0);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		item = new JMenuItem("이전 찾기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_F3,ActionEvent.SHIFT_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		item = new JMenuItem("바꾸기");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_H,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		item = new JMenuItem("이동");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_G,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		m2.addSeparator();
		
		item = new JMenuItem("모두 선택");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_A,ActionEvent.CTRL_MASK);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		item = new JMenuItem("시간/날짜");
		Key = KeyStroke.getKeyStroke(KeyEvent.VK_F5,0);
		item.setAccelerator(Key);
		item.addActionListener(this);
		m2.add(item);
		
		
		m3=new JMenu("서식(O)");m3.setMnemonic(KeyEvent.VK_O);
		m4=new JMenu("보기(V)");m4.setMnemonic(KeyEvent.VK_V);
		m5=new JMenu("도움말(H)");m5.setMnemonic(KeyEvent.VK_H);
		
		
		mb.add(m1);mb.add(m2);mb.add(m3);mb.add(m4);mb.add(m5);
		this.setJMenuBar(mb);
	}

	public static void main(String[] args) {
		
		new Memomain();

	}
	void open() {
		int re = jfc.showSaveDialog(this);
		if(re==jfc.APPROVE_OPTION) {
			File file = jfc.getSelectedFile();
			String data="";
			int ch;
			try {
				FileReader fr = new FileReader(file);
				while((ch=fr.read())!=-1)
					data=data+(char)ch;
				ta.setText(data);
				fr.close();
			} catch (Exception e) {
				e.getMessage();
			}
		}
	}
	void save() { //과제// 처음 저장시 대화 상자가 나와야 하고 그 이후에는 나오면 x 다른 이름으로 저장 때만 대화 상자 나오게 하기
		
		if(getTitle().equals("레삐의 메모장")) {
			try {
				int re = jfc.showSaveDialog(this);
				File file = jfc.getSelectedFile();
				FileWriter fw = new FileWriter(file);
				fw.write(ta.getText());
				setTitle(file.getName());
				fw.close();
				JOptionPane.showMessageDialog(this,"파일을 저장했습니다.");
				isNew = false;
				
			} catch (IOException e) {
				e.getMessage();
			}
		}
		else {
	        try {
	        	File file = jfc.getSelectedFile();
	            PrintStream ps=new PrintStream(file);
	            ps.println(ta.getText());
	            ps.close();
	            JOptionPane.showMessageDialog(this,"파일을 저장했습니다.");
	        } catch (FileNotFoundException e) {
	            e.printStackTrace();
	        }
		}
	}
	void saveAs() {
		int re = jfc.showSaveDialog(this);
		if(re==jfc.APPROVE_OPTION) {
			File file = jfc.getSelectedFile();
			try {
				FileWriter fw = new FileWriter(file);
				fw.write(ta.getText());
				setTitle(file.getName());
				fw.close();
				JOptionPane.showMessageDialog(this,"파일을 저장했습니다.");
				isNew = false;
				
			} catch (IOException e) {
				e.getMessage();
			}
		
		}
	}
	void quit() {System.exit(0);}
	@Override
	public void actionPerformed(ActionEvent e) {
		String cmd = e.getActionCommand();
		switch (cmd) {
		case "새로 만들기"-> {ta.setText("");setTitle("레삐의 메모장");}
		case "열기"->open();
		case "저장"->save();
		case "다른이름으로 저장"->saveAs();
		case "끝내기"->quit();
		}
			
		}
		
		
	}

